#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.0
#  in conjunction with Tcl version 8.6
#    Dec 29, 2020 06:17:37 PM +0200  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Seker1_support
import Studentmainmenu

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    Seker1_support.set_Tk_var()
    top = Seker (root)
    Seker1_support.init(root, top)
    root.mainloop()

w = None
def create_Seker(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Seker(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    Seker1_support.set_Tk_var()
    top = Seker (w)
    Seker1_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Seker():
    global w
    w.destroy()
    w = None

class Seker:
    def Submit(self):
        tk.messagebox._show('seker page', 'הסקר הוגש')
        self.mainmenu()
    def mainmenu(self):
        root.destroy()
        Studentmainmenu.vp_start_gui()
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1366x705+-94+20")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1,  1)
        top.title("סקר")
        top.configure(background="#8080ff")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.TLabel2 = ttk.Label(top)
        self.TLabel2.place(relx=0.35, rely=0.044, height=45, width=194)
        self.TLabel2.configure(background="#8080ff")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.TLabel2.configure(relief="flat")
        self.TLabel2.configure(anchor='w')
        self.TLabel2.configure(justify='left')
        self.TLabel2.configure(text='''סקר מורים''')

        self.value_list = ['1', '2', '3']

        self.Question1 = tk.Spinbox(top, from_=1.0, to=100.0)
        self.Question1.place(relx=0.249, rely=0.142, relheight=0.044
                , relwidth=0.225)
        self.Question1.configure(activebackground="#f9f9f9")
        self.Question1.configure(background="white")
        self.Question1.configure(buttonbackground="#d9d9d9")
        self.Question1.configure(disabledforeground="#a3a3a3")
        self.Question1.configure(font="TkDefaultFont")
        self.Question1.configure(foreground="black")
        self.Question1.configure(highlightbackground="black")
        self.Question1.configure(highlightcolor="black")
        self.Question1.configure(insertbackground="black")
        self.Question1.configure(selectbackground="blue")
        self.Question1.configure(selectforeground="white")
        self.Question1.configure(value= self.value_list)

        self.Question2 = tk.Spinbox(top, from_=1.0, to=100.0)
        self.Question2.place(relx=0.249, rely=0.227, relheight=0.044
                , relwidth=0.225)
        self.Question2.configure(activebackground="#f9f9f9")
        self.Question2.configure(background="white")
        self.Question2.configure(buttonbackground="#d9d9d9")
        self.Question2.configure(disabledforeground="#a3a3a3")
        self.Question2.configure(font="TkDefaultFont")
        self.Question2.configure(foreground="black")
        self.Question2.configure(highlightbackground="black")
        self.Question2.configure(highlightcolor="black")
        self.Question2.configure(insertbackground="black")
        self.Question2.configure(selectbackground="blue")
        self.Question2.configure(selectforeground="white")
        self.Question2.configure(value= self.value_list)

        self.Question3 = tk.Spinbox(top, from_=1.0, to=100.0)
        self.Question3.place(relx=0.249, rely=0.312, relheight=0.044
                , relwidth=0.225)
        self.Question3.configure(activebackground="#f9f9f9")
        self.Question3.configure(background="white")
        self.Question3.configure(buttonbackground="#d9d9d9")
        self.Question3.configure(disabledforeground="#a3a3a3")
        self.Question3.configure(font="TkDefaultFont")
        self.Question3.configure(foreground="black")
        self.Question3.configure(highlightbackground="black")
        self.Question3.configure(highlightcolor="black")
        self.Question3.configure(insertbackground="black")
        self.Question3.configure(selectbackground="blue")
        self.Question3.configure(selectforeground="white")
        self.Question3.configure(value= self.value_list)

        self.Question4 = tk.Spinbox(top, from_=1.0, to=100.0)
        self.Question4.place(relx=0.249, rely=0.397, relheight=0.044
                , relwidth=0.225)
        self.Question4.configure(activebackground="#f9f9f9")
        self.Question4.configure(background="white")
        self.Question4.configure(buttonbackground="#d9d9d9")
        self.Question4.configure(disabledforeground="#a3a3a3")
        self.Question4.configure(font="TkDefaultFont")
        self.Question4.configure(foreground="black")
        self.Question4.configure(highlightbackground="black")
        self.Question4.configure(highlightcolor="black")
        self.Question4.configure(insertbackground="black")
        self.Question4.configure(selectbackground="blue")
        self.Question4.configure(selectforeground="white")
        self.Question4.configure(value= self.value_list)

        self.Question5 = tk.Spinbox(top, from_=1.0, to=100.0)
        self.Question5.place(relx=0.249, rely=0.496, relheight=0.044
                , relwidth=0.225)
        self.Question5.configure(activebackground="#f9f9f9")
        self.Question5.configure(background="white")
        self.Question5.configure(buttonbackground="#d9d9d9")
        self.Question5.configure(disabledforeground="#a3a3a3")
        self.Question5.configure(font="TkDefaultFont")
        self.Question5.configure(foreground="black")
        self.Question5.configure(highlightbackground="black")
        self.Question5.configure(highlightcolor="black")
        self.Question5.configure(insertbackground="black")
        self.Question5.configure(selectbackground="blue")
        self.Question5.configure(selectforeground="white")
        self.Question5.configure(value= self.value_list)

        self.Question6 = tk.Spinbox(top, from_=1.0, to=100.0)
        self.Question6.place(relx=0.249, rely=0.596, relheight=0.044
                , relwidth=0.225)
        self.Question6.configure(activebackground="#f9f9f9")
        self.Question6.configure(background="white")
        self.Question6.configure(buttonbackground="#d9d9d9")
        self.Question6.configure(disabledforeground="#a3a3a3")
        self.Question6.configure(font="TkDefaultFont")
        self.Question6.configure(foreground="black")
        self.Question6.configure(highlightbackground="black")
        self.Question6.configure(highlightcolor="black")
        self.Question6.configure(insertbackground="black")
        self.Question6.configure(selectbackground="blue")
        self.Question6.configure(selectforeground="white")
        self.Question6.configure(value= self.value_list)

        self.Question7 = tk.Spinbox(top, from_=1.0, to=100.0)
        self.Question7.place(relx=0.249, rely=0.695, relheight=0.044
                , relwidth=0.225)
        self.Question7.configure(activebackground="#f9f9f9")
        self.Question7.configure(background="white")
        self.Question7.configure(buttonbackground="#d9d9d9")
        self.Question7.configure(disabledforeground="#a3a3a3")
        self.Question7.configure(font="TkDefaultFont")
        self.Question7.configure(foreground="black")
        self.Question7.configure(highlightbackground="black")
        self.Question7.configure(highlightcolor="black")
        self.Question7.configure(insertbackground="black")
        self.Question7.configure(selectbackground="blue")
        self.Question7.configure(selectforeground="white")
        self.Question7.configure(value= self.value_list)

        self.Question8 = tk.Spinbox(top, from_=1.0, to=100.0)
        self.Question8.place(relx=0.249, rely=0.78, relheight=0.044
                , relwidth=0.225)
        self.Question8.configure(activebackground="#f9f9f9")
        self.Question8.configure(background="white")
        self.Question8.configure(buttonbackground="#d9d9d9")
        self.Question8.configure(disabledforeground="#a3a3a3")
        self.Question8.configure(font="TkDefaultFont")
        self.Question8.configure(foreground="black")
        self.Question8.configure(highlightbackground="black")
        self.Question8.configure(highlightcolor="black")
        self.Question8.configure(insertbackground="black")
        self.Question8.configure(selectbackground="blue")
        self.Question8.configure(selectforeground="white")
        self.Question8.configure(value= self.value_list)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg='#0080c0',fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.183, rely=0.177,  relheight=0.445)
        self.TSeparator1.configure(orient="vertical")

        self.TLabel3 = ttk.Label(top)
        self.TLabel3.place(relx=0.124, rely=0.128, height=31, width=54)
        self.TLabel3.configure(background="#8080ff")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(font="-family {Segoe UI} -size 9 -underline 1")
        self.TLabel3.configure(relief="flat")
        self.TLabel3.configure(anchor='w')
        self.TLabel3.configure(justify='left')
        self.TLabel3.configure(text='''מקרא''')
        self.tooltip_font = "TkDefaultFont"
        self.TLabel3_tooltip = \
        ToolTip(self.TLabel3, self.tooltip_font, '''מקרא''')

        self.TLabel4 = ttk.Label(top)
        self.TLabel4.place(relx=0.102, rely=0.17, height=186, width=99)
        self.TLabel4.configure(background="#8080ff")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(font="TkDefaultFont")
        self.TLabel4.configure(relief="flat")
        self.TLabel4.configure(anchor='w')
        self.TLabel4.configure(justify='left')
        self.TLabel4.configure(text='''ברמה גבוהה - 1

ברמה בינונית - 2

ברמה מועטה - 3''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.476, rely=0.142, height=21, width=364)
        self.Label1.configure(background="#8080ff")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''צוות המורים מתייחס ומטפל בקשיים חברתיים ורגשיים של התלמידים''')

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.476, rely=0.227, height=21, width=264)
        self.Label2.configure(background="#8080ff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''המורים מוכנים לסייע גם מעבר לשעות השיעור''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.476, rely=0.312, height=21, width=293)
        self.Label3.configure(background="#8080ff")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''צוות המורים פתוח להצעות ויוזמות שונות של התלמידים''')

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.483, rely=0.397, height=21, width=203)
        self.Label4.configure(background="#8080ff")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''צוות המורים מעניק יחס אישי לתלמידים''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.476, rely=0.496, height=21, width=204)
        self.Label5.configure(background="#8080ff")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''צוות המורים מתייחס בכבוד לתלמידים''')

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.476, rely=0.596, height=21, width=234)
        self.Label6.configure(background="#8080ff")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='''המחנך יודע להציב גבולות ולשמור על משמעת''')

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.476, rely=0.695, height=21, width=234)
        self.Label7.configure(background="#8080ff")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(text='''המחנך מצליח לפתור בעיות בין התלמידים''')

        self.Label8 = tk.Label(top)
        self.Label8.place(relx=0.477, rely=0.78, height=21, width=270)
        self.Label8.configure(background="#8080ff")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(text='''המחנך מתעניין במצב הילד לא רק במסגרת ביה"ס''')

        self.SubmitButton = tk.Button(top)
        self.SubmitButton.place(relx=0.249, rely=0.908, height=44, width=97)
        self.SubmitButton.configure(activebackground="#ececec")
        self.SubmitButton.configure(activeforeground="#000000")
        self.SubmitButton.configure(background="#d9d9d9")
        self.SubmitButton.configure(cursor="hand2")
        self.SubmitButton.configure(disabledforeground="#a3a3a3")
        self.SubmitButton.configure(foreground="#000000")
        self.SubmitButton.configure(highlightbackground="#d9d9d9")
        self.SubmitButton.configure(highlightcolor="black")
        self.SubmitButton.configure(pady="0")
        self.SubmitButton.configure(text='''הגשה''')
        self.SubmitButton.configure(command=self.Submit)

        self.BackToMenu = tk.Button(top)
        self.BackToMenu.place(relx=0.022, rely=0.908, height=44, width=157)
        self.BackToMenu.configure(activebackground="#ececec")
        self.BackToMenu.configure(activeforeground="#000000")
        self.BackToMenu.configure(background="#d9d9d9")
        self.BackToMenu.configure(cursor="hand2")
        self.BackToMenu.configure(disabledforeground="#a3a3a3")
        self.BackToMenu.configure(foreground="#000000")
        self.BackToMenu.configure(highlightbackground="#d9d9d9")
        self.BackToMenu.configure(highlightcolor="black")
        self.BackToMenu.configure(pady="0")
        self.BackToMenu.configure(text='''חזרה לתפריט הראשי''')
        self.BackToMenu.configure(command=self.mainmenu)

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





